generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------- MODELS --------------------------------------------

model User {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(50)
  email        String
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  polls   Poll[]
  votes   Vote[]
  sessions Session[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("sessions")
}

model Poll {
  id        String   @id @default(uuid())
  text      String   @db.VarChar(500)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  options Option[]
  votes Vote[]

  user User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("polls")
}

model Option {
  id        String   @id @default(uuid())
  text      String   @db.VarChar(100)
  pollId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  votes Vote[]

  poll Poll @relation(fields: [pollId], references: [id])

  @@index([pollId])
  @@map("options")
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  pollId    String
  optionId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  poll   Poll   @relation(fields: [pollId], references: [id])
  option Option @relation(fields: [optionId], references: [id])

  @@unique([userId, pollId])
  @@map("votes")
}
